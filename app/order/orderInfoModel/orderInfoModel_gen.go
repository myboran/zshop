// Code generated by goctl. DO NOT EDIT.

package orderInfoModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	orderInfoFieldNames          = builder.RawFieldNames(&OrderInfo{})
	orderInfoRows                = strings.Join(orderInfoFieldNames, ",")
	orderInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(orderInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	orderInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(orderInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	orderInfoModel interface {
		Insert(ctx context.Context, data *OrderInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*OrderInfo, error)
		FindOneByOrderSn(ctx context.Context, orderSn string) (*OrderInfo, error)
		Update(ctx context.Context, data *OrderInfo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOrderInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	OrderInfo struct {
		Id      int64  `db:"id"`
		User    int64  `db:"user"`     // 用户id
		OrderSn string `db:"order_sn"` // 订单号
		Statue  string `db:"statue"`   // 订单状态
	}
)

func newOrderInfoModel(conn sqlx.SqlConn) *defaultOrderInfoModel {
	return &defaultOrderInfoModel{
		conn:  conn,
		table: "`order_info`",
	}
}

func (m *defaultOrderInfoModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultOrderInfoModel) FindOne(ctx context.Context, id int64) (*OrderInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", orderInfoRows, m.table)
	var resp OrderInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderInfoModel) FindOneByOrderSn(ctx context.Context, orderSn string) (*OrderInfo, error) {
	var resp OrderInfo
	query := fmt.Sprintf("select %s from %s where `order_sn` = ? limit 1", orderInfoRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, orderSn)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderInfoModel) Insert(ctx context.Context, data *OrderInfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, orderInfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.User, data.OrderSn, data.Statue)
	return ret, err
}

func (m *defaultOrderInfoModel) Update(ctx context.Context, newData *OrderInfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, orderInfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.User, newData.OrderSn, newData.Statue, newData.Id)
	return err
}

func (m *defaultOrderInfoModel) tableName() string {
	return m.table
}
